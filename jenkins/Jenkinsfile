pipeline {
    agent any
    
    environment {
        ECR_REPO = credentials('ECR_REPO')
        EKS_CLUSTER = credentials('EKS_CLUSTER')
        AWS_REGION = 'eu-north-1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('AWS Login') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        set -e
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set default.region $AWS_REGION
                        
                        # Login to ECR
                        REGISTRY=$(echo $ECR_REPO | cut -d'/' -f1)
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY
                    '''
                }
            }
        }
        
        stage('Build & Push') {
            steps {
                sh '''
                    set -e
                    # Build the Docker image (files are in root directory)
                    docker build -t ${ECR_REPO}:${BUILD_NUMBER} .
                    docker build -t ${ECR_REPO}:latest .
                    
                    # Push to ECR
                    docker push ${ECR_REPO}:${BUILD_NUMBER}
                    docker push ${ECR_REPO}:latest
                '''
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                sh '''
                    set -e
                    # Update kubeconfig
                    aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER
                    
                    # Replace image tag in K8s manifests and apply
                    sed -i "s|IMAGE_TAG|${BUILD_NUMBER}|g" k8s/deployment.yaml
                    kubectl apply -f k8s/
                    
                    # Wait for deployment to complete
                    kubectl rollout status deployment/hello-app
                '''
            }
        }
    }
    
    post {
        always {
            node {
                // Clean up Docker images to save space
                sh 'docker system prune -f'
            }
        }
    }
}
